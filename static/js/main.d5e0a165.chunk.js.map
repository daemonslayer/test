{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Cube","props","mesh","useRef","useState","hovered","setHover","active","setActive","useFrame","current","rotation","x","y","ref","scale","onClick","e","onPointerOver","onPointerOut","attach","args","color","App","colorManagement","position","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mPAKA,SAASA,EAAKC,GAEZ,IAAMC,EAAOC,mBAFM,EAKSC,oBAAS,GALlB,mBAKZC,EALY,KAKHC,EALG,OAMSF,oBAAS,GANlB,mBAMZG,EANY,KAMJC,EANI,KAWnB,OAFAC,aAAS,kBAAOP,EAAKQ,QAAQC,SAASC,EAAIV,EAAKQ,QAAQC,SAASE,GAAK,OAGnE,0CACMZ,EADN,CAEEa,IAAKZ,EACLa,MAAOR,EAAS,CAAC,IAAK,IAAK,KAAO,CAAC,EAAG,EAAG,GACzCS,QAAS,SAAAC,GAAC,OAAIT,GAAWD,IACzBW,cAAe,SAAAD,GAAC,OAAIX,GAAS,IAC7Ba,aAAc,SAAAF,GAAC,OAAIX,GAAS,MAC5B,uCAAmBc,OAAO,WAAWC,KAAM,CAAC,EAAG,EAAG,KAClD,0CAAsBD,OAAO,WAAWE,MAAOjB,EAAU,UAAY,YAgB5DkB,MAXf,WACE,OACE,kBAAC,IAAD,CAAQC,iBAAe,GACrB,uCACA,gCAAYC,SAAU,CAAC,GAAI,GAAI,MAC/B,kBAACzB,EAAD,CAAMyB,SAAU,EAAE,IAAK,EAAG,KAC1B,kBAACzB,EAAD,CAAMyB,SAAU,CAAC,IAAK,EAAG,OCxBXC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,SD2HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.d5e0a165.chunk.js","sourcesContent":["import ReactDOM from 'react-dom'\r\nimport React, { useRef, useState } from 'react'\r\nimport { Canvas, useFrame } from 'react-three-fiber'\r\nimport './App.css';\r\n\r\nfunction Cube(props) {\r\n  // This reference will give us direct access to the mesh\r\n  const mesh = useRef()\r\n\r\n  // Set up state for the hovered and active state\r\n  const [hovered, setHover] = useState(false)\r\n  const [active, setActive] = useState(false)\r\n\r\n  // Rotate mesh every frame, this is outside of React without overhead\r\n  useFrame(() => (mesh.current.rotation.x = mesh.current.rotation.y += 0.01))\r\n\r\n  return (\r\n    <mesh\r\n      {...props}\r\n      ref={mesh}\r\n      scale={active ? [1.5, 1.5, 1.5] : [1, 1, 1]}\r\n      onClick={e => setActive(!active)}\r\n      onPointerOver={e => setHover(true)}\r\n      onPointerOut={e => setHover(false)}>\r\n      <boxBufferGeometry attach=\"geometry\" args={[1, 1, 1]} />\r\n      <meshStandardMaterial attach=\"material\" color={hovered ? 'hotpink' : 'orange'} />\r\n    </mesh>\r\n  );\r\n}\r\n\r\nfunction App() {\r\n  return(\r\n    <Canvas colorManagement>\r\n      <ambientLight />\r\n      <pointLight position={[10, 10, 10]} />\r\n      <Cube position={[-1.2, 0, 0]} />\r\n      <Cube position={[1.2, 0, 0]} />\r\n    </Canvas>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <App />,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}